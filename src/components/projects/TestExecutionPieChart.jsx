import React, { useRef } from "react";
import { Card, Button } from "react-bootstrap";
import { Pie } from "react-chartjs-2";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";

const TestExecutionPieChart = ({
    progressData,
    legendLabels,
    getBackgroundColor,
    palette,
    projectID,
    selectedTestExecution
}) => {
    const chartRef = useRef(null);

    const data = {
        labels: legendLabels,
        datasets: [
            {
                data: progressData ? Object.values(progressData) : [],
                backgroundColor: legendLabels.map(getBackgroundColor),
                borderWidth: 1,
                borderColor: palette.white,
            },
        ],
    };

    const options = {
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: true,
            },
        },
    };

    const handleExportPDF = () => {
        const chartElement = chartRef.current;
        if (chartElement) {
            html2canvas(chartElement, { scale: 2 }).then((canvas) => {
                const imgData = canvas.toDataURL("image/png");

                // Calculate aspect ratio
                const imgWidth = 250; // Desired width in PDF
                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                const pdf = new jsPDF();

                // Title
                pdf.setFontSize(20);
                pdf.text("Test Execution Report", 10, 20);

                // Project ID and selected test execution
                pdf.setFontSize(12);
                pdf.text(`Project ID: ${projectID}`, 10, 30);
                pdf.text(`Selected Test Execution: ${selectedTestExecution}`, 10, 40);

                // Pie chart
                pdf.addImage(imgData, "PNG", 10, 50, imgWidth, imgHeight);

                // Legend labels and percentage data
                if (progressData) {
                    pdf.setFontSize(10);
                    const yPos = 60 + imgHeight;
                    legendLabels.forEach((label, index) => {
                        pdf.text(
                            `${label}: ${progressData[Object.keys(progressData)[index]]}%`,
                            10,
                            yPos + index * 10
                        );
                    });
                }

                // Footer
                pdf.setFontSize(8);
                pdf.text("Generated by Artemiz", 10, 280);

                pdf.save("test_execution_report.pdf");
            });
        }
    };

    return (
        <div className="mt-3">
            <Card>
                <Card.Header>
                    <Card.Title>Pie Chart</Card.Title>
                </Card.Header>
                <Card.Body style={{ textAlign: "center" }}>
                    <div ref={chartRef} style={{ margin: "auto" }}>
                        <Pie data={data} options={options} />
                    </div>
                    <Button onClick={handleExportPDF} className="mt-3">Export to PDF</Button>
                </Card.Body>
            </Card>
        </div>
    );
};

export default TestExecutionPieChart;
