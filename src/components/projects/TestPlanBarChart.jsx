import React, { useRef } from 'react';
import { Bar } from 'react-chartjs-2';
import { Card, Button } from 'react-bootstrap';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import usePalette from '../../hooks/usePalette';

const TestPlanBarChart = ({
    testExecutionsProgress,
    selectedProject,
    selectedTestPlan
}) => {
    const palette = usePalette();
    const chartRef = useRef(null);

    // Prepare data for chart
    const chartData = {
        labels: testExecutionsProgress.map(item => item.testexecutionID),
        datasets: [
            {
                label: 'Pass',
                backgroundColor: '#27ae60',
                data: testExecutionsProgress.map(item => item.progress.find(p => p.result_id === 3)?.percentage || 0),
            },
            {
                label: 'Fail',
                backgroundColor: '#e74c3c',
                data: testExecutionsProgress.map(item => item.progress.find(p => p.result_id === 4)?.percentage || 0),
            },
            {
                label: 'Blocked',
                backgroundColor: '#9b59b6',
                data: testExecutionsProgress.map(item => item.progress.find(p => p.result_id === 5)?.percentage || 0),
            },
            {
                label: 'Passed with Restriction',
                backgroundColor: '#f39c12',
                data: testExecutionsProgress.map(item => item.progress.find(p => p.result_id === 6)?.percentage || 0),
            },
        ],
    };

    const options = {
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: true,
                position: 'bottom',
            },
        },
        scales: {
            x: {
                stacked: true,
                grid: {
                    display: false,
                },
            },
            y: {
                stacked: true,
                max: 100,
                ticks: {
                    stepSize: 20,
                },
            },
        },
    };

    const handleExportPDF = () => {
        const chartElement = chartRef.current;
        if (chartElement) {
            html2canvas(chartElement, { scale: 2 }).then((canvas) => {
                const imgData = canvas.toDataURL('image/png');

                // Calculate aspect ratio
                const imgWidth = 250; // Desired width in PDF
                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                const pdf = new jsPDF({
                    orientation: 'landscape', // Set the orientation to landscape
                });

                // Title
                pdf.setFontSize(20);
                pdf.text('Test Plan Bar Chart', 10, 20);

                // Project ID and selected test plan
                pdf.setFontSize(12);
                pdf.text(`Project ID: ${selectedProject}`, 10, 30);
                pdf.text(`Selected Test Plan: ${selectedTestPlan}`, 10, 40);

                // Add the chart image
                pdf.addImage(imgData, 'PNG', 10, 50, imgWidth, imgHeight);

                // Footer
                pdf.setFontSize(8);
                pdf.text('Generated by Artemiz', 10, 280);

                pdf.save('test_plan_bar_chart.pdf');
            });
        }
    };

    return (
        <div className="mt-3">
            <Card>
                <Card.Header>
                    <Card.Title>Test Plan ID: {selectedTestPlan}</Card.Title>
                    <h6 className="card-subtitle text-muted">
                        Progress and result of each test execution
                    </h6>
                </Card.Header>
                <Card.Body>
                    <div className="chart" ref={chartRef}>
                        <Bar data={chartData} options={options} />
                    </div>
                    <Button onClick={handleExportPDF} className="mt-3">
                        Export to PDF
                    </Button>
                </Card.Body>
            </Card>
        </div>
    );
};

export default TestPlanBarChart;
